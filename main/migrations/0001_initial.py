# Generated by Django 4.1.9 on 2023-05-18 21:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[(1, "HOD"), (2, "Staff")], default=1, max_length=10
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AminoAcidComposition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asparing",
                    models.FloatField(default=0, verbose_name="Аспарагиновая кислота"),
                ),
                (
                    "glutamin",
                    models.FloatField(default=0, verbose_name="Глутаминовая кислота"),
                ),
                ("serin", models.FloatField(default=0, verbose_name="Серин")),
                ("gistidin", models.FloatField(default=0, verbose_name="Гистидин")),
                ("glitsin", models.FloatField(default=0, verbose_name="Глицин")),
                ("treonin", models.FloatField(default=0, verbose_name="Треонин")),
                ("arginin", models.FloatField(default=0, verbose_name="Аргинин")),
                ("alanin", models.FloatField(default=0, verbose_name="Аланин")),
                ("tirosin", models.FloatField(default=0, verbose_name="Тирозин")),
                ("tsistein", models.FloatField(default=0, verbose_name="Цистеин")),
                ("valin", models.FloatField(default=0, verbose_name="Валин")),
                ("metionin", models.FloatField(default=0, verbose_name="Метионин")),
                ("triptofan", models.FloatField(default=0, verbose_name="Триптофан")),
                (
                    "fenilalalin",
                    models.FloatField(default=0, verbose_name="Фенилаланин"),
                ),
                ("izoleitsin", models.FloatField(default=0, verbose_name="Изолейцин")),
                ("leitsin", models.FloatField(default=0, verbose_name="Лейцин")),
                ("lisin", models.FloatField(default=0, verbose_name="Лизин")),
                ("prolin", models.FloatField(default=0, verbose_name="Пролин")),
            ],
            options={
                "verbose_name": " -- (Аминокислотный Состав) -- ",
            },
        ),
        migrations.CreateModel(
            name="Categories",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Name_of_category",
                    models.CharField(
                        help_text="(Мясные, Молочные, Хлебобулочные и т.д.)",
                        max_length=75,
                        verbose_name="Наименование категории",
                    ),
                ),
                (
                    "Region",
                    models.CharField(
                        choices=[
                            ("Чуйская область", "Чуйская область"),
                            ("Иссык-кульская область", "Иссык-кульская область"),
                            ("Ошская область", "Ошская область"),
                            ("Таласская область", "Таласская область"),
                            ("Нарынская область", "Нарынская область"),
                            ("Джалал-Абадская область", "Джалал-Абадская область"),
                            ("Баткенская область", "Баткенская область"),
                        ],
                        default="Чуйская область",
                        max_length=50,
                        verbose_name="Регион",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория",
            },
        ),
        migrations.CreateModel(
            name="FatAcids",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_of_acid",
                    models.CharField(
                        choices=[
                            (
                                "Насыщенные жирные кислоты, %",
                                "Насыщенные жирные кислоты, %",
                            ),
                            (
                                "Мононенасыщенные жирные кислоты, %",
                                "Мононенасыщенные жирные кислоты, %",
                            ),
                            (
                                "Полиненасыщенные жирные кислоты, %",
                                "Полиненасыщенные жирные кислоты, %",
                            ),
                        ],
                        default="Насыщенные жирные кислоты, %",
                        max_length=75,
                        verbose_name="Тип ж-кислоты",
                    ),
                ),
                ("value", models.FloatField(verbose_name="Содержание")),
            ],
            options={
                "verbose_name": " -- (Виды Жирнокислоты) -- ",
            },
        ),
        migrations.CreateModel(
            name="Ingredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=40, verbose_name="Наименование ингредиента"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.categories",
                        verbose_name="Категория",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Наименование ингредиента) -- ",
            },
        ),
        migrations.CreateModel(
            name="MineralComposition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Ca", models.FloatField(default=0, verbose_name="Ca (Кальций)")),
                ("Na", models.FloatField(default=0, verbose_name="Na (Натрий)")),
                ("K", models.FloatField(default=0, verbose_name="K (Калий)")),
                ("P", models.FloatField(default=0, verbose_name="P (Фосфор)")),
                ("Mn", models.FloatField(default=0, verbose_name="Mn (Марганец)")),
                ("Zn", models.FloatField(default=0, verbose_name="Zn (Цинк)")),
                ("Se", models.FloatField(default=0, verbose_name="Se (Скандий)")),
                ("Cu", models.FloatField(default=0, verbose_name="Cu (Медь)")),
                ("Fe", models.FloatField(default=0, verbose_name="Fe (Железо)")),
                ("I", models.FloatField(default=0, verbose_name="I (Йод)")),
                ("B", models.FloatField(default=0, verbose_name="B (Бор)")),
                ("Li", models.FloatField(default=0, verbose_name="Li (Литий)")),
                ("Al", models.FloatField(default=0, verbose_name="Al (Алюминий)")),
                ("Mg", models.FloatField(default=0, verbose_name="Mg (Магний)")),
                ("V", models.FloatField(default=0, verbose_name="V (Ванадий)")),
                ("Ni", models.FloatField(default=0, verbose_name="Ni (Нитрий)")),
                ("Co", models.FloatField(default=0, verbose_name="Co (Ковальт)")),
                ("Cr", models.FloatField(default=0, verbose_name="Cr (Хром)")),
                ("Sn", models.FloatField(default=0, verbose_name="Sn (Олово)")),
            ],
            options={
                "verbose_name": " -- (Минеральный состав) -- ",
            },
        ),
        migrations.CreateModel(
            name="Products",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "attribute_name",
                    models.CharField(
                        max_length=75, verbose_name="Наименование продукта"
                    ),
                ),
                (
                    "date_analis",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="Дата исследования",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- Наименование продукта -- ",
            },
        ),
        migrations.CreateModel(
            name="Types",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Name_of_type",
                    models.CharField(
                        help_text="(Мясные, Молочные, Хлебобулочные и т.д.)",
                        max_length=75,
                        null=True,
                        verbose_name="Наименование типа",
                    ),
                ),
                (
                    "Category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.categories",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тип продуктов",
            },
        ),
        migrations.CreateModel(
            name="Staffs",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("address", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amino_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.aminoacidcomposition",
                        verbose_name="Амнокислотный состав",
                    ),
                ),
                (
                    "category_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.categories",
                        verbose_name="Категории",
                    ),
                ),
                (
                    "fatacid_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.fatacids",
                        verbose_name="Жирнокислотный состав",
                    ),
                ),
                (
                    "minerals_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.mineralcomposition",
                        verbose_name="Минеральный состав",
                    ),
                ),
                (
                    "product_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.products",
                        verbose_name="Продукты",
                    ),
                ),
                (
                    "role",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="products",
            name="types",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                to="main.types",
                verbose_name="Тип продукта",
            ),
        ),
        migrations.CreateModel(
            name="MineralsIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Ca", models.FloatField(default=0, verbose_name="Ca (Кальций)")),
                ("Na", models.FloatField(default=0, verbose_name="Na (Натрий)")),
                ("K", models.FloatField(default=0, verbose_name="K (Калий)")),
                ("P", models.FloatField(default=0, verbose_name="P (Фосфор)")),
                ("Mn", models.FloatField(default=0, verbose_name="Mn (Марганец)")),
                ("Zn", models.FloatField(default=0, verbose_name="Zn (Цинк)")),
                ("Se", models.FloatField(default=0, verbose_name="Se (Скандий)")),
                ("Cu", models.FloatField(default=0, verbose_name="Cu (Медь)")),
                ("Fe", models.FloatField(default=0, verbose_name="Fe (Железо)")),
                ("I", models.FloatField(default=0, verbose_name="I (Йод)")),
                ("B", models.FloatField(default=0, verbose_name="B (Бор)")),
                ("Li", models.FloatField(default=0, verbose_name="Li (Литий)")),
                ("Al", models.FloatField(default=0, verbose_name="Al (Алюминий)")),
                ("Mg", models.FloatField(default=0, verbose_name="Mg (Магний)")),
                ("V", models.FloatField(default=0, verbose_name="V (Ванадий)")),
                ("Ni", models.FloatField(default=0, verbose_name="Ni (Нитрий)")),
                ("Co", models.FloatField(default=0, verbose_name="Co (Ковальт)")),
                ("Cr", models.FloatField(default=0, verbose_name="Cr (Хром)")),
                ("Sn", models.FloatField(default=0, verbose_name="Sn (Олово)")),
                (
                    "ingredient",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.ingredients",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Минеральный состав) -- ",
            },
        ),
        migrations.AddField(
            model_name="mineralcomposition",
            name="product",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                to="main.products",
            ),
        ),
        migrations.CreateModel(
            name="FatAcidsIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_of_acid",
                    models.CharField(
                        choices=[
                            (
                                "Насыщенные жирные кислоты, %",
                                "Насыщенные жирные кислоты, %",
                            ),
                            (
                                "Мононенасыщенные жирные кислоты, %",
                                "Мононенасыщенные жирные кислоты, %",
                            ),
                            (
                                "Полиненасыщенные жирные кислоты, %",
                                "Полиненасыщенные жирные кислоты, %",
                            ),
                        ],
                        default="Насыщенные жирные кислоты, %",
                        max_length=75,
                        verbose_name="Тип ж-кислоты",
                    ),
                ),
                ("value", models.FloatField(verbose_name="Содержание")),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.ingredients",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Виды Жирнокислоты) -- ",
            },
        ),
        migrations.AddField(
            model_name="fatacids",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT, to="main.products"
            ),
        ),
        migrations.CreateModel(
            name="ChemicalsIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "soluable_solids",
                    models.FloatField(
                        default=0,
                        verbose_name="Массовая доля растворимых сухих веществ, %",
                    ),
                ),
                (
                    "ascorbic_acids",
                    models.FloatField(
                        default=0,
                        verbose_name="Массовая доля аскорбиновой кислоты, г/дм3",
                    ),
                ),
                (
                    "ash_content",
                    models.FloatField(default=0, verbose_name="Зольность, %"),
                ),
                (
                    "moisture",
                    models.FloatField(default=0, verbose_name="Массовая доля влаги, %"),
                ),
                (
                    "protein",
                    models.FloatField(default=0, verbose_name="Массовая доля белка, %"),
                ),
                (
                    "fat",
                    models.FloatField(default=0, verbose_name="Массовая доля жира, %"),
                ),
                (
                    "carbohydrates",
                    models.FloatField(
                        default=0, verbose_name="Массовая доля углеводов, %"
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.ingredients",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Химический состав) -- ",
            },
        ),
        migrations.CreateModel(
            name="Chemicals",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "soluable_solids",
                    models.FloatField(
                        default=0,
                        verbose_name="Массовая доля растворимых сухих веществ, %",
                    ),
                ),
                (
                    "ascorbic_acids",
                    models.FloatField(
                        default=0,
                        verbose_name="Массовая доля аскорбиновой кислоты, г/дм3",
                    ),
                ),
                (
                    "ash_content",
                    models.FloatField(default=0, verbose_name="Зольность, %"),
                ),
                (
                    "moisture",
                    models.FloatField(default=0, verbose_name="Массовая доля влаги, %"),
                ),
                (
                    "protein",
                    models.FloatField(default=0, verbose_name="Массовая доля белка, %"),
                ),
                (
                    "fat",
                    models.FloatField(default=0, verbose_name="Массовая доля жира, %"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.products",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Химический состав) -- ",
            },
        ),
        migrations.AddField(
            model_name="aminoacidcomposition",
            name="product",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                to="main.products",
            ),
        ),
        migrations.CreateModel(
            name="AminoAcidCompOfIng",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asparing",
                    models.FloatField(default=0, verbose_name="Аспарагиновая кислота"),
                ),
                (
                    "glutamin",
                    models.FloatField(default=0, verbose_name="Глутаминовая кислота"),
                ),
                ("serin", models.FloatField(default=0, verbose_name="Серин")),
                ("gistidin", models.FloatField(default=0, verbose_name="Гистидин")),
                ("glitsin", models.FloatField(default=0, verbose_name="Глицин")),
                ("treonin", models.FloatField(default=0, verbose_name="Треонин")),
                ("arginin", models.FloatField(default=0, verbose_name="Аргинин")),
                ("alanin", models.FloatField(default=0, verbose_name="Аланин")),
                ("tirosin", models.FloatField(default=0, verbose_name="Тирозин")),
                ("tsistein", models.FloatField(default=0, verbose_name="Цистеин")),
                ("valin", models.FloatField(default=0, verbose_name="Валин")),
                ("metionin", models.FloatField(default=0, verbose_name="Метионин")),
                ("triptofan", models.FloatField(default=0, verbose_name="Триптофан")),
                (
                    "fenilalalin",
                    models.FloatField(default=0, verbose_name="Фенилаланин"),
                ),
                ("izoleitsin", models.FloatField(default=0, verbose_name="Изолейцин")),
                ("leitsin", models.FloatField(default=0, verbose_name="Лейцин")),
                ("lisin", models.FloatField(default=0, verbose_name="Лизин")),
                ("prolin", models.FloatField(default=0, verbose_name="Пролин")),
                (
                    "ingredient",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="main.ingredients",
                    ),
                ),
            ],
            options={
                "verbose_name": " -- (Аминокислотный Состав Ингредиента) -- ",
            },
        ),
        migrations.CreateModel(
            name="AdminHOD",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
